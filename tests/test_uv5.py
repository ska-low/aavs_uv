"""test_uv5: Test conversion to UVX."""

import os

from ska_ost_low_uv.io import hdf5_to_uvx, read_uvx, write_uvx
from ska_ost_low_uv.utils import get_test_data


def test_roundtrip():
    """Do a roundtrip: create -> write -> read -> compare."""
    try:
        fn = get_test_data('aavs2_2x500ms/correlation_burst_204_20230927_35116_0.hdf5')
        uv = hdf5_to_uvx(fn, telescope_name='aavs2')

        write_uvx(uv, 'tests/test.h5')
        uv2 = read_uvx('tests/test.h5')

        # CHECK CONTEXT PASSING MAKES IT THROUGH ROUNDTRIP
        context = {
            'observer': 'MCCS team',
            'intent': 'Commissioning sun observation for calibration',
            'date': '2023-09-27',
            'notes': 'Commissioning observation',
            'chicken': {'noodle': 'Yes', 'spring': 'No'},
        }

        provenance = {'extra_info': 'Generated by test suite.'}

        uv = hdf5_to_uvx(
            fn, telescope_name='aavs2', context=context, provenance=provenance
        )
        write_uvx(uv, 'tests/test.h5')
        uv2 = read_uvx('tests/test.h5')

        for k, v in uv.context.items():
            assert k in uv2.context.keys()
            print(v, uv2.context[k])
            assert uv2.context[k] == v

        for k, v in uv.provenance.items():
            assert k in uv2.provenance.keys()
            assert isinstance(uv2.provenance[k], type(v))

        for k, v in uv.antennas.attrs.items():
            assert k in uv2.antennas.attrs.keys()
            assert isinstance(uv2.antennas.attrs[k], type(v))
    finally:
        if os.path.exists('tests/test.h5'):
            os.system('rm tests/test.h5')


if __name__ == '__main__':
    test_roundtrip()
